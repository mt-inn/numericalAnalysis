#include <math.h>
#include <stdio.h>
//調べる対象の関数を定義。
static double func(double x) {
	double fx = 1 + cosh(x) * cos(x);
	return fx;
}
//メイン関数。f(x)=0となるようなxを求めていく
int main(void) {
	//変数の初期化
	//xm: 二分法で求めたxを格納する変数
	//min: 探索する範囲の最小値
	//max: 探索する範囲の最大値
	//ans: 答えを格納する配列。長さは想定する解の最大個数+1
	double xm, min = 0, max = 15;
	double ans[11];
	//後にあるi-1処理のために、0番目はminの値に。
	ans[0] = min;
	//for文および答えの呼び出しのためにiを定義。想定する解の個数だけループさせる
	int i;
	for (i = 1; i <= 10; i++) {
		//変数の初期化。
		//x1: 二分法で使用する値のうち、小さいほう
		//x2: 二分法で使用する値のうち、大きいほう
		double x1 = ceil(ans[i - 1]), x2;
		//探索範囲がmaxを超えそうなとき、ループを抜ける
		if (x1 >= max) { break; }
		//探索回数(n)と、その上限(nmax)
		int n, nmax = 50;
		//前の解を参照して決めたx1に対し、f(x)=0を跨ぐx2を求める。
		//仮にx2がmaxを超えそうな場合はmaxと等しいものとする。
		for (x2 = x1;x2 < max;x2++) {
			if (func(x1) * func(x2) < 0) {
				break;
			}
		}
		//探索回数の上限を叩くまでループさせる
		for (n = 0;n < nmax;n++) {
			xm = (x1 + x2) / 2;
			//二分法。f(x1)とf(xm)が異符号のときはx2、同符号のときはx1をxmとする。
			(func(x1) * func(xm) < 0) ? (x2 = xm) : (x1 = xm);
			//f(xm)が十分に小さく、なおかつmax以下のとき、そのxmをf(xm)=0を満たすものとして答えとして保存する。
			//nに関するループを強制終了する。
			if ((fabs(func(xm)) < 0.001) && (xm <=max)) {
				ans[i] = xm;
				break;
			}
		}
		if (ans[i] >= max) {
			break;
		}
	}
	//そのときのiの値を答えの数とし、変数cを用いて順番に呼び出す。
	for (int c = 1;c < i; c++) {
		printf("x%d=%lf\n", c, ans[c]);
	}
}
